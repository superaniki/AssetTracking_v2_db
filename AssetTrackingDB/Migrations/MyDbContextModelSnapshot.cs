// <auto-generated />
using System;
using EntityDBTest;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AssetTrackingDB.Migrations
{
    [DbContext(typeof(MyDbContext))]
    partial class MyDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AssetTracking.Asset", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AssetType")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfPurchase")
                        .HasColumnType("datetime2");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OfficeId")
                        .HasColumnType("int");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("OfficeId");

                    b.ToTable("Assets");

                    b.HasDiscriminator<string>("AssetType").HasValue("Asset");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Office", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("ExchangeRateFromDollar")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("Offices");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Country = "Sweden",
                            Currency = "SEK",
                            ExchangeRateFromDollar = 0.02f
                        },
                        new
                        {
                            Id = 2,
                            Country = "USA",
                            Currency = "USD",
                            ExchangeRateFromDollar = 1f
                        },
                        new
                        {
                            Id = 3,
                            Country = "Greece",
                            Currency = "EUR",
                            ExchangeRateFromDollar = 0.92f
                        });
                });

            modelBuilder.Entity("AssetTracking.Computer", b =>
                {
                    b.HasBaseType("AssetTracking.Asset");

                    b.HasDiscriminator().HasValue("Computer");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Brand = "ASUS ROG",
                            DateOfPurchase = new DateTime(2021, 4, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Model = "B550-F",
                            OfficeId = 1,
                            Price = 243f
                        },
                        new
                        {
                            Id = 2,
                            Brand = "HP",
                            DateOfPurchase = new DateTime(2022, 1, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Model = "14S-FQ1010NO",
                            OfficeId = 2,
                            Price = 679f
                        },
                        new
                        {
                            Id = 6,
                            Brand = "HP",
                            DateOfPurchase = new DateTime(2021, 8, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Model = "Elitebook",
                            OfficeId = 3,
                            Price = 2234f
                        },
                        new
                        {
                            Id = 7,
                            Brand = "HP",
                            DateOfPurchase = new DateTime(2021, 7, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Model = "Elitebook",
                            OfficeId = 1,
                            Price = 3234f
                        });
                });

            modelBuilder.Entity("AssetTracking.Phone", b =>
                {
                    b.HasBaseType("AssetTracking.Asset");

                    b.HasDiscriminator().HasValue("Phone");

                    b.HasData(
                        new
                        {
                            Id = 3,
                            Brand = "Samsung",
                            DateOfPurchase = new DateTime(2023, 9, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Model = "S20 Plus",
                            OfficeId = 3,
                            Price = 1500f
                        },
                        new
                        {
                            Id = 4,
                            Brand = "Sony Xperia",
                            DateOfPurchase = new DateTime(2020, 3, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Model = "10 III",
                            OfficeId = 2,
                            Price = 800f
                        },
                        new
                        {
                            Id = 5,
                            Brand = "IPhone",
                            DateOfPurchase = new DateTime(2021, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Model = "10",
                            OfficeId = 3,
                            Price = 951f
                        });
                });

            modelBuilder.Entity("AssetTracking.Asset", b =>
                {
                    b.HasOne("Office", "Office")
                        .WithMany("Assets")
                        .HasForeignKey("OfficeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Office");
                });

            modelBuilder.Entity("Office", b =>
                {
                    b.Navigation("Assets");
                });
#pragma warning restore 612, 618
        }
    }
}
